// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Clock {
    #[prost(map = "string, uint64", tag = "1")]
    pub values: ::std::collections::HashMap<::prost::alloc::string::String, u64>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClockInfos {
    #[prost(message, repeated, tag = "1")]
    pub clock_infos: ::prost::alloc::vec::Vec<ClockInfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MergeLogs {
    #[prost(message, repeated, tag = "1")]
    pub merge_logs: ::prost::alloc::vec::Vec<MergeLog>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClockInfo {
    #[prost(message, optional, tag = "1")]
    pub clock: ::core::option::Option<Clock>,
    #[prost(bytes = "vec", tag = "2")]
    pub node_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "3")]
    pub clock_hash: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "4")]
    pub message_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint64, tag = "5")]
    pub count: u64,
    #[prost(uint64, tag = "6")]
    pub create_at: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MergeLog {
    #[prost(bytes = "vec", tag = "1")]
    pub from_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "2")]
    pub to_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint64, tag = "3")]
    pub start_count: u64,
    #[prost(uint64, tag = "4")]
    pub end_count: u64,
    #[prost(bytes = "vec", tag = "5")]
    pub s_clock_hash: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "6")]
    pub e_clock_hash: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint64, tag = "7")]
    pub merge_at: u64,
}
/// zmessage type = Z_TYPE_CLOCK
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ZClock {
    #[prost(enumeration = "ClockType", tag = "1")]
    pub r#type: i32,
    #[prost(bytes = "vec", tag = "2")]
    pub data: ::prost::alloc::vec::Vec<u8>,
}
/// Server Clock Message
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EventTrigger {
    #[prost(message, optional, tag = "1")]
    pub clock_info: ::core::option::Option<ClockInfo>,
    #[prost(message, optional, tag = "2")]
    pub message: ::core::option::Option<super::zmessage::ZMessage>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DiffReq {
    #[prost(bytes = "vec", tag = "1")]
    pub to: ::prost::alloc::vec::Vec<u8>,
    #[prost(message, optional, tag = "2")]
    pub from_clock: ::core::option::Option<ClockInfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DiffResp {
    #[prost(bytes = "vec", tag = "1")]
    pub to: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint64, tag = "2")]
    pub start_index: u64,
    #[prost(message, repeated, tag = "3")]
    pub diffs: ::prost::alloc::vec::Vec<super::zmessage::ZMessage>,
    #[prost(message, optional, tag = "4")]
    pub from_clock: ::core::option::Option<ClockInfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ActiveSync {
    #[prost(bytes = "vec", tag = "1")]
    pub to: ::prost::alloc::vec::Vec<u8>,
    #[prost(message, repeated, tag = "2")]
    pub diffs: ::prost::alloc::vec::Vec<super::zmessage::ZMessage>,
    #[prost(message, optional, tag = "3")]
    pub latest: ::core::option::Option<ClockInfo>,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ClockType {
    EventTrigger = 0,
    DiffReq = 1,
    DiffRsp = 2,
    ActiveSync = 3,
}
impl ClockType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            ClockType::EventTrigger => "CLOCK_TYPE_EVENT_TRIGGER",
            ClockType::DiffReq => "CLOCK_TYPE_DIFF_REQ",
            ClockType::DiffRsp => "CLOCK_TYPE_DIFF_RSP",
            ClockType::ActiveSync => "CLOCK_TYPE_ACTIVE_SYNC",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CLOCK_TYPE_EVENT_TRIGGER" => Some(Self::EventTrigger),
            "CLOCK_TYPE_DIFF_REQ" => Some(Self::DiffReq),
            "CLOCK_TYPE_DIFF_RSP" => Some(Self::DiffRsp),
            "CLOCK_TYPE_ACTIVE_SYNC" => Some(Self::ActiveSync),
            _ => None,
        }
    }
}
